#!/usr/bin/env bash

red='\033[1;31m'
grn='\033[1;32m'
yel='\033[1;33m'
blu='\033[1;36m'
pnk='\033[1;35m'
clr='\033[0m'

dir=$(dirname `readlink -f $0`)
public_ip=${public_ip}
driver_host=$public_ip
driver_peer_id=${peer_id}
l0_lb=${load_balancer_l0_url}
l1_lb=${load_balancer_l1_url}
lb_maintenance_port=8889
block_explorer_url=${block_explorer_url}
user=${user}
snapshot_stored_path=${snapshot_stored_path}
bucket_name=${bucket_name}
bucket_access_key=${bucket_access_key}
bucket_secret_key=${bucket_secret_key}
l0_public_port=${l0_public_port}
l1_public_port=${l1_public_port}
wait_before_rollback="30s"

stopL0LB() {
  curl -X POST http://$l0_lb:$lb_maintenance_port/settings/maintenance
}

startL0LB() {
  curl -X DELETE http://$l0_lb:$lb_maintenance_port/settings/maintenance
}

stopL1LB() {
  curl -X POST http://$l1_lb:$lb_maintenance_port/settings/maintenance
}

startL1LB() {
  curl -X DELETE http://$l1_lb:$lb_maintenance_port/settings/maintenance
}

stopLB() {
  stopL0LB
  stopL1LB
}

startLB() {
  startL0LB
  startL1LB
}

checkHosts() {
  if [ -z "$${hosts_file:-}" ]; then
    echo -e "$${red}hosts_file was not set$${clr}"
    exit 1
  elif ! grep -Fxq "$driver_host" $hosts_file; then
    echo -e "$${red}There is no driver_host ($driver_host) in $hosts_file $${clr}"
    exit 1
  fi
}

setHosts() {
  hosts_file=$1
  if [ -z "$${hosts_file:-}" ]; then
    local _default_file="$dir/cluster-hosts"
    if [ -f "$_default_file" ]; then
      echo "Setting up default location as hosts_file ($_default_file)"
      hosts_file=$_default_file
      all_hosts=( `cat $hosts_file` )
      other_hosts=( `cat $hosts_file | grep -v $driver_host` )
    fi
  fi
}

sshDriver() {
  checkHosts
  ssh admin@$driver_host -o StrictHostKeyChecking=no -n $1
}

checkAllNodesState() {
  while read -r ip; do
    echo "Checking state of node: $ip"
    checkNodeState $ip $1
  done <$hosts_file
}

checkNodeState() {
  node_to_check=$1
  port_to_check=$2
  local actual_node_state

  while [[ "$actual_node_state" != "Ready" && "$actual_node_state" != "ReadyToJoin" ]]; do
    actual_node_state=`curl -s http://$node_to_check:$port_to_check/node/state | tr -d '"'`
    echo -e "$${pnk} Current node ($node_to_check) state: $actual_node_state $${clr}"
    sleep 1
  done
}

stopServices() {
  echo -e "$${blu}Stopping L0 and L1 services$${clr}"

  parallel-ssh -p 10 -t 0 -l admin -h $hosts_file -O StrictHostKeyChecking=no -i "sudo systemctl stop l1 && sudo systemctl stop l0"
}

downloadRollbackSnapshot() {
  echo -e "$${blu}Downloading latest snapshot$${clr}"

  sshDriver "curl -s $block_explorer_url/global-snapshots/latest | jq '.data.hash' -r > /home/$user/tessellation/l0/rollback-snapshot"
  latest_snapshot=`sshDriver "head -1 /home/$user/tessellation/l0/rollback-snapshot"`
  path_to_snapshots="/home/$user/tessellation/l0/$snapshot_stored_path"
  path_to_latest_snapshot="$path_to_snapshots/$latest_snapshot"
  echo -e "$${blu}Latest snapshot is: $latest_snapshot $${clr}"
  if sshDriver "[ ! -f $path_to_latest_snapshot ]" ; then
    echo -e "$${yel}Snapshot not found on node: $driver_host $${clr}"

    i=0
    len=$${#other_hosts[@]}
    snapshot_exists=1
    while [[ $i -lt $len ]] && sshDriver "[ ! -f $path_to_latest_snapshot ]"; do
      host=$${other_hosts[$i]} 
      echo -e "$${pnk}Looking for latest snapshot in node: $host $${clr}" 
      sshDriver "scp $user@$host:$path_to_latest_snapshot $path_to_snapshots"
      
      snapshot_exists=sshDriver "[ -f $path_to_latest_snapshot ]"
      if sshDriver "[ -f $path_to_latest_snapshot ]" ; then 
        echo -e "$${blu}Snapshot found and downloaded from node: $host $${clr}"
      else
        echo -e "$${yel}Snapshot not found on node: $host$${clr}"
      fi
      
      let i++
    done
  fi

  if sshDriver "[ ! -f $path_to_latest_snapshot ]" ; then
    echo -e "$${yel}Snapshot not found on all nodes"
    echo -e "$${pnk}Looking for latest snapshot in s3 bucket: $bucket_name {clr}"
    sshDriver "export AWS_ACCESS_KEY_ID=$bucket_access_key && export AWS_SECRET_ACCESS_KEY=$bucket_secret_key && /usr/bin/aws s3 cp s3://$bucket_name/snapshot-streaming/$latest_snapshot $path_to_snapshots"
  fi
}

prepareRollbackFlow(){
  echo -e "$${blu}Setting rollback flow for cluster$${clr}"

  latest_snapshot=`sshDriver "head -1 /home/$user/tessellation/l0/rollback-snapshot"`
  path_to_latest_snapshot="/home/$user/tessellation/l0/$snapshot_stored_path/$latest_snapshot"

  parallel-ssh -p 10 -t 0 -l admin -H "$${other_hosts[*]}" -O StrictHostKeyChecking=no -i "rm -f /home/$user/tessellation/l0/start && ln -s /home/$user/tessellation/l0/run-validator /home/$user/tessellation/l0/start"
  if sshDriver "[ -f $path_to_latest_snapshot ]" ; then
    sshDriver "rm -f /home/$user/tessellation/l0/start && ln -s /home/$user/tessellation/l0/run-rollback /home/$user/tessellation/l0/start"
  else
    echo -e "$${red}Cannot find file with latest snapshot: $${grn}$latest_snapshot$${clr}"
    exit 1
  fi
}

prepareGenesisFlow(){
  echo -e "$${blu}Setting genesis flow for cluster$${clr}"

  path_to_genesis="/home/$user/tessellation/l0/genesis.csv"

  parallel-ssh -p 10 -t 0 -l admin -H "$${other_hosts[*]}" -O StrictHostKeyChecking=no -i "rm -f /home/$user/tessellation/l0/start && ln -s /home/$user/tessellation/l0/run-validator /home/$user/tessellation/l0/start"
  if sshDriver "[ -f $path_to_genesis ]" ; then
    sshDriver "rm -f /home/$user/tessellation/l0/start && ln -s /home/$user/tessellation/l0/run-genesis /home/$user/tessellation/l0/start"
  else
    echo -e "$${red}Cannot find $${grn}genesis.csv$${clr}"
    exit 1
  fi
}

prepareInitialValidator(){
  echo -e "$${blu}Setting initial validator: $driver_host $${clr}"

  prepareL1Validators $${other_hosts[@]}
  sshDriver "rm -f /home/$user/tessellation/l1/start && ln -s /home/$user/tessellation/l1/run-initial-validator /home/$user/tessellation/l1/start"
}

prepareL1Validators() {
  local _hosts=($@)
  echo -e "$${blu}Setting l1 validators: $${_hosts[@]} $${clr}"

  parallel-ssh -p 10 -t 0 -l admin -H "$${_hosts[*]}" -O StrictHostKeyChecking=no -i "rm -f /home/$user/tessellation/l1/start && ln -s /home/$user/tessellation/l1/run-validator /home/$user/tessellation/l1/start"
}

restartL0Services() {
  echo -e "$${blu}Restarting L0 services$${clr}"

  parallel-ssh -p 10 -t 0 -l admin -h $hosts_file -O StrictHostKeyChecking=no -i "sudo /home/$user/tessellation/l0/restart"
}

restartAllL1Services(){
  restartL1Services $${all_hosts[@]}
}

restartL1Services(){
  local _hosts=($@)
  echo -e "$${blu}Restarting L1 services $${_hosts[@]} $${clr}"

  parallel-ssh -p 10 -t 0 -l admin -H "$${_hosts[*]}" -O StrictHostKeyChecking=no -i "sudo /home/$user/tessellation/l1/restart"
}

joinL0Cluster() {
  echo -e "$${blu}Joining L0 nodes$${clr}"

  checkAllNodesState $l0_public_port

  parallel-ssh -p 10 -t 0 -l admin -H "$${other_hosts[*]}" -O StrictHostKeyChecking=no -i "sudo /home/$user/tessellation/l0/join $driver_peer_id $driver_host"
}

joinL1Initial() {
  echo -e "$${blu}Joining L1 nodes to initial $${clr}"

  checkNodeState $driver_host $l1_public_port

  joinL1ChoosenNode $driver_peer_id $driver_host $${other_hosts[@]}
}

joinL1ChoosenNode() {
  host_to_join_id=$1
  host_to_join_ip=$2
  shift 2
  local _hosts=($@)
  echo -e "$${blu}Joining L1 nodes $${_hosts[@]} $${clr}"

  for _host in $${_hosts[*]}; do
    checkNodeState $_host $l1_public_port
  done

  parallel-ssh -p 10 -t 0 -l admin -H "$${_hosts[*]}" -O StrictHostKeyChecking=no -i  "sudo /home/$user/tessellation/l1/join $host_to_join_id $host_to_join_ip"
}

restart(){
  stopLB
  stop $1
  sleep "$wait_before_rollback"
  downloadRollbackSnapshot
  startRollback $1
  startLB
}

restartL1Initial(){
  stopL1LB
  setHosts
  checkHosts
  prepareInitialValidator
  restartAllL1Services
  joinL1Initial
  startL1LB
}

restartL1Choosen(){
  setHosts
  checkHosts
  prepareL1Validators $1
  restartL1Services $1
}

joinL1Choosen() {
  setHosts
  checkHosts
  joinL1ChoosenNode $1 $2 $3
}

stop(){
  stopLB
  setHosts $1
  checkHosts
  stopServices
}

startNodes(){
  checkHosts
  restartL0Services
  joinL0Cluster
  prepareInitialValidator
  restartAllL1Services
  joinL1Initial
}

startGenesis(){
  setHosts $1
  if sshDriver "[ -n \"\`ls -A /home/$user/tessellation/l0/$snapshot_stored_path\`\" ]" ; then
    echo -e "$${red} Directory /home/$user/tessellation/l0/$snapshot_stored_path is not empty$${clr}"
    exit 1
  fi
  read -p "$(echo -e "$${yel}Do you want to continue starting cluster from genesis (YES/n)?$${clr} ")" choice
    case "$choice" in
      YES ) ;;
      n|N ) exit 1 ;;
      * ) exit 1;;
  esac
  checkHosts
  prepareGenesisFlow
  startNodes
}

startRollback(){
  setHosts $1
  checkHosts
  prepareRollbackFlow
  startNodes
}

downloadSnapshot(){
  setHosts $1
  checkHosts
  downloadRollbackSnapshot
}

#################

usage=$(cat <<-EOF
Usage: $(basename $0) <command> [args]

Commands:
    restart \t\t Restart nodes with rollback flow using latest snapshot from block explorer
    restartL1Initial \t\t Restart all l1 with initial-validator
    restartL1Choosen \t\t Restart choosen l1 with initial-validator
    joinL1Choosen \t\t Restart choosen l1 with initial-validator
    startGenesis \t Start nodes with genesis flow using provided genesis.csv file
    startRollback \t Start nodes with rollback flow using snapshot from rollback-snapshot file
    stop \t\t Stop l0.service and l1.service on all nodes
    stopLB \t\t Stop L0 and L1 load balancers
    startLB \t\t Start L0 and L1 load balancers
    downloadSnapshot \t Downloading latest snapshot from block explorer and writing it to rollback-snapshot

EOF
)

if [[ $1 == "" ]]; then
  echo -e "$usage"
  exit 1
fi

case "$1" in
  restart)
    restart "$2"
    ;;
  restartL1Initial)
    restartL1Initial 
    ;;
  restartL1Choosen)
    restartL1Choosen "$2" 
    ;;
  joinL1Choosen)
    joinL1Choosen "$2" "$3" "$4"
    ;;
  startGenesis)
    startGenesis "$2"
    ;;
  startRollback)
    startRollback "$2"
    ;;
  stop)
    stop "$2"
    ;;
  downloadSnapshot)
    downloadSnapshot "$2"
    ;;
  stopLB)
    stopLB
    ;;
  startLB)
    startLB
    ;;
  *)
    echo -e "$usage"
    exit 1
esac

exit 0
